import React from "react";
import { Doughnut } from "react-chartjs-2";
import { Chart as ChartJS, ArcElement, Tooltip, Legend, Title } from "chart.js";
import style from "./Results.module.css";

ChartJS.register(ArcElement, Tooltip, Legend, Title);

export default function VulnerabilityChart({ stats }) {
  const data = {
    labels: ["", "", "", ""],
    datasets: [
      {
        data: [stats.critical, stats.high, stats.medium, stats.low],
        backgroundColor: [
          "#FF0000",
          "#FF4500",
          "#FFD700",
          "#00FF00",
        ],
        hoverBackgroundColor: [
          "rgba(255, 0, 0, 0.7)",
          "rgba(255, 69, 0, 0.7)",
          "rgba(255, 215, 0, 0.7)",
          "rgba(0, 255, 0, 0.7)",
        ],
        borderColor: [
          "#FF0000",
          "#FF4500",
          "#FFD700",
          "#00FF00",
        ],
        borderWidth: 2,
        hoverBorderWidth: 3,
      },
    ],
  };

  const options = {
    responsive: true,
    maintainAspectRatio: false,
    cutout: "70%",
    plugins: {
      legend: {
        display: false,
      },
      tooltip: {
        enabled: true,
        callbacks: {
          title: function() {
            return '';
          },
          label: function (context) {
            const value = context.raw || 0;
            const total = Object.values(stats).reduce((acc, curr) => acc + curr, 0);
            const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0;
            const severity = ["Critical", "High", "Medium", "Low"][context.dataIndex];
            return [
              `Risk Level: ${severity}`,
              `Count: ${value}`,
              `Percentage: ${percentage}%`
            ];
          },
        },
        backgroundColor: 'rgba(0, 0, 0, 0.85)',
        titleColor: '#fff',
        bodyColor: '#fff',
        borderColor: '#636E97',
        borderWidth: 1,
        padding: {
          top: 8,
          right: 12,
          bottom: 8,
          left: 12
        },
        displayColors: true,
        boxPadding: 4,
        titleFont: {
          size: 0
        },
        bodyFont: {
          size: 13,
          weight: '500',
          family: 'Arial, sans-serif'
        },
        cornerRadius: 6,
        caretSize: 8,
        caretPadding: 8,
        animation: {
          duration: 150
        },
        xPadding: 8,
        yPadding: 8,
        mode: 'nearest',
        intersect: true,
        position: 'nearest',
        usePointStyle: true,
        pointStyle: 'circle',
        external: function(context) {
          const tooltip = context.tooltip;
          if (tooltip && tooltip.caretX) {
            const chart = context.chart;
            const centerX = chart.width / 2;
            const centerY = chart.height / 2;
            
            // Position left or right based on hover position
            if (tooltip.caretX < centerX) {
              tooltip.x = 10; // Position on left
            } else {
              tooltip.x = chart.width - tooltip.width - 10; // Position on right
            }
            
            // Avoid center text
            if (Math.abs(tooltip.caretY - centerY) < 50) {
              tooltip.y = tooltip.caretY < centerY ? 
                centerY - 60 : 
                centerY + 60;
            }
          }
        }
      },
    },
    animation: {
      animateScale: true,
      animateRotate: true,
    },
    hover: {
      mode: 'nearest',
      intersect: true,
    },
    layout: {
      padding: {
        top: 20,
        right: 20,
        bottom: 20,
        left: 20
      }
    }
  };

  const total = Object.values(stats).reduce((acc, curr) => acc + curr, 0);

  return (
    <div className={style.chartContainer}>
      <div className={style.chartWrapper}>
        <Doughnut data={data} options={options} />
        <div className={style.chartCenter}>
          <span>{total}</span>
          <span>Total Findings</span>
        </div>
      </div>
      <div className={style.legend}>
        {["Critical", "High", "Medium", "Low"].map((label, index) => (
          <div key={label} className={style.legendItem}>
            <span
              className={style.dot}
              style={{ background: data.datasets[0].backgroundColor[index] }}
            ></span>
            <span>
              {label} ({data.datasets[0].data[index]})
            </span>
          </div>
        ))}
      </div>
    </div>
  );
}
